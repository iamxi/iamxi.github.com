<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on 我的博客</title>
    <link>https://blog.qiwei.dev/tags/java/</link>
    <description>Recent content in Java on 我的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 25 Jan 2018 20:53:21 +0800</lastBuildDate><atom:link href="https://blog.qiwei.dev/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>spring cloud feign 拦截器配置</title>
      <link>https://blog.qiwei.dev/posts/coding/spring-cloud-feign-add-interceptor/</link>
      <pubDate>Thu, 25 Jan 2018 20:53:21 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/spring-cloud-feign-add-interceptor/</guid>
      <description>问题 公司大规模推全链路，要求所有应用都接入。手头一个新的项目，采用spring cloud框架。通过 feign 调用rest接口。但是支持提供的支持 HttpClient4 的方式无法对 feign 起作用。
思路 想着 feign 也是采用 HttpClient 的。按理对 HttpClient4 起作用的也应该同样有效。然后去看了下架构组全链路配置代码，原来他们是在初始化 HttpCLient 实例时候，加入了拦截器。通过拦截器，在 header 中加入链路信息。但是这个方式似乎对 feign 没啥作用。那我就自己实现添加拦截器呗。
查了下 feign 添加拦截器，网络上提供的方式都是通过自定义 FeignConfiguration 的方式来实现。方法如下：
新建 FeignConfiguration类
public class FeignConfiguration { @Bean public FeignBasicAuthRequestInterceptor basicAuthRequestInterceptor() { return new FeignBasicAuthRequestInterceptor(); } } 然后在配置客户端调用时候加入配置中
@FeignClient(value = &amp;#34;xxx-service&amp;#34;, path = &amp;#34;/xxx&amp;#34;, configuration = FeignConfiguration.class) 只是这种方法无法做到全局。找了好久，看了文档，都没有办法配置全局。
无奈，去翻源码吧。找到了 FeignAutoConfiguration 类。看到了初始化配置。
protected static class HttpClientFeignConfiguration { @Autowired( required = false ) private HttpClient httpClient; protected HttpClientFeignConfiguration() { } @Bean @ConditionalOnMissingBean({Client.</description>
    </item>
    
    <item>
      <title>javabean字段文字拼接</title>
      <link>https://blog.qiwei.dev/posts/coding/java-bean-field-assemble/</link>
      <pubDate>Sat, 20 Jan 2018 10:58:21 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/java-bean-field-assemble/</guid>
      <description>问题 接了一个需求，从数据库拿出患者的记录，这些记录都是一些吸烟年份、饮酒年份、是否糖尿病等，不是数字就是布尔值，需要通过代码转化为普通人能理解的文字。
思前想后，总不能使用大量 if-else 判断来拼接字符串吧。可以采用模板，但是那样除了必要判空，代码和模板也将分离，不方便维护。而且有些字段存在依赖关系。
解决 刚好之前看了使用注解来替代枚举的方式。想着是否可以在每个需要拼接的字段上打上注解，通过判断注解的方式拼接。注解中也可以放入模板、依赖关系等配置。
@Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface StringAssemble { /** * 模板 */ String template(); /** * 分类 */ String type() default &amp;#34;&amp;#34;; /** * 上级依赖 */ String dependency() default &amp;#34;&amp;#34;; /** * 相互依赖的内容之间的分割符号 */ String dependencySplit() default &amp;#34;,&amp;#34;; } 上面注解中，templete 主要是字段值需要填入的文字模板，type 用于不同的字段组合，dependency 主要是有依赖关系的字段之间的内容组合，最后一个是有依赖关系的字段字段拼接后用于隔离的标点。
实现代码如下：
private static String stringAssemble(Object data, String type, String splitPunctuation) { final Map&amp;lt;String, String&amp;gt; infoMap = new HashMap&amp;lt;&amp;gt;(); final Map&amp;lt;String, String&amp;gt; dependencyMap = new HashMap&amp;lt;&amp;gt;(); try { Field[] fields = data.</description>
    </item>
    
    <item>
      <title>SpringMVC没有拦截根路径的问题</title>
      <link>https://blog.qiwei.dev/posts/coding/springmvc-cant-fiter-root-url/</link>
      <pubDate>Tue, 02 Dec 2014 15:22:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/springmvc-cant-fiter-root-url/</guid>
      <description>在使用tomcat和spring mvc开发web项目时候，月到了根路径无法被拦截器拦截的问题。</description>
    </item>
    
    <item>
      <title>Spring4定时任务的注解配置</title>
      <link>https://blog.qiwei.dev/posts/coding/spring-scheduling-annotation-support/</link>
      <pubDate>Mon, 03 Nov 2014 22:57:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/spring-scheduling-annotation-support/</guid>
      <description>Spring4框架下，不使用xml配置文件，而采用注解配置定时任务。</description>
    </item>
    
    <item>
      <title>Clone使用方法详解</title>
      <link>https://blog.qiwei.dev/posts/coding/java-clone/</link>
      <pubDate>Thu, 05 Sep 2013 13:29:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/java-clone/</guid>
      <description>在实际编程过程中，我们常常要遇到这种情况：有一个对象A，在某一时刻A中已经包含了一些有效值，此时可能会需要一个和A完全相同新对象B，并且此后对B 任何改动都不会影响到A中的值，也就是说，A与B是两个独立的对象，但B的初始值是由A对象确定的。在Java语言中，用简单的赋值语句是不能满足这种需 求的。要满足这种需求虽然有很多途径，但实现clone（）方法是其中最简单，也是最高效的手段。</description>
    </item>
    
    <item>
      <title>Java静态代码块（static{}）</title>
      <link>https://blog.qiwei.dev/posts/coding/java-static-code-block/</link>
      <pubDate>Wed, 21 Aug 2013 10:43:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/java-static-code-block/</guid>
      <description>与一般代码块的异同：相同点：都是在JVM加载类时且在构造方法执行之前执行，在类中都可以定义多个，一般在代码块中对一些static变量进行赋值。不同点：静态代码块在非静态代码块之前执行。静态代码块只在第一次new执行一次，之后不再执行，而非静态代码块在每new一次就执行一次。非静态代码块可在普通方法中定义；而静态代码块不行。</description>
    </item>
    
    <item>
      <title>Java源码解读——ArrayList</title>
      <link>https://blog.qiwei.dev/posts/coding/java-source-arraylist/</link>
      <pubDate>Wed, 14 Aug 2013 15:11:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/java-source-arraylist/</guid>
      <description>ArrayList是一个实现可变长数组，继承AbstractList类，实现所有的List接口，还实现了RandomAccess、Cloneable、Serializable接口。ArrayList不进行同步，除此之外基本和Vector等同。</description>
    </item>
    
    <item>
      <title>Mybatis返回特殊Map</title>
      <link>https://blog.qiwei.dev/posts/coding/mybatis-special-map/</link>
      <pubDate>Sat, 04 Aug 2012 23:00:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/mybatis-special-map/</guid>
      <description>想返回个特殊实体，一个Map，key是一个表的一个字段的值，value是另一个表的所有记录。参考了下网上的“攻略”，不过和攻略里面讲的有点不同，那里面key的值value的实体实在同一个表内，如果不同表，会报缺少set方法的异常。解决方法很简单，就是在实体里面加个字段对应的属性。但是并不愿意为了一个查询语句就要去改变实体。
无聊看了下session的select，提供了通过 ResultHandler 来处理返回的结果集。所以尝试着解决这个问题。
mapper.xml里面的配置如下：
&amp;lt;resultMap type=&amp;#34;HashMap&amp;#34; id=&amp;#34;testMap&amp;#34;&amp;gt; &amp;lt;result column=&amp;#34;UA_INFO&amp;#34; property=&amp;#34;key&amp;#34; /&amp;gt; &amp;lt;association property=&amp;#34;value&amp;#34; resultMap=&amp;#34;com.xxx.xxx.BaseResultMap&amp;#34;&amp;gt; &amp;lt;/association&amp;gt; &amp;lt;/resultMap&amp;gt; &amp;lt;select id=&amp;#34;getUaMapByTimestamp&amp;#34; parameterType=&amp;#34;Map&amp;#34; resultMap=&amp;#34;testMap&amp;#34;&amp;gt; SQL语句 &amp;lt;/select&amp;gt; com.xxx.xxx.BaseResultMap是另一个实体的mapper的resultMap。这个查询，返回的每一条记录都是 {key=..., value=...}
这个结果集并不符合要求。不过通过ResultHandler来处理每一条记录就可以达到要求了。
看下Mybatis源码里面有关继承 ResultHandler 的 DefaultMapResultHandler类。
public class DefaultMapResultHandler&amp;lt;K, V&amp;gt; implements ResultHandler { private final Map&amp;lt;K, V&amp;gt; mappedResults; private final String mapKey; @SuppressWarnings(&amp;#34;unchecked&amp;#34;) public DefaultMapResultHandler(String mapKey, ObjectFactory objectFactory) { this.mappedResults = objectFactory.create(Map.class); this.mapKey = mapKey; } public void handleResult(ResultContext context) { // TODO is that assignment always true?</description>
    </item>
    
    <item>
      <title>Java可变参数方法及它的重载</title>
      <link>https://blog.qiwei.dev/posts/coding/java-varargs-method-overload/</link>
      <pubDate>Sat, 28 Apr 2012 12:00:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/java-varargs-method-overload/</guid>
      <description>Java可变参数方法及它的重载</description>
    </item>
    
    <item>
      <title>Hibernate获取返回值报XXX connot be cast to [Ljava.lang.Object</title>
      <link>https://blog.qiwei.dev/posts/coding/hibernate-cannot-cast/</link>
      <pubDate>Thu, 03 Nov 2011 21:41:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/hibernate-cannot-cast/</guid>
      <description>今天在测试时候发现在获取Hibernate返回数据时候报 java.math.BigDecimal cannot be cast to \[Ljava.lang.Object 异常，但是查看了代码，很简单也很平常，createNativeQuery执行，getResultList获取结果集，每行都用Object[]类型。调试时候发现返回结果集为[2]，也就是就一行且一个。也就是说，每行的类型不再是 Object[]。
按以往， getResultList 的返回是一个 List(Object\[\])，当如果返回只有一个，比如1或2是，类型就变成了该数据库字段所对应的类型，在我这里就是BigDecimal。
真是不明白，多个就是Object[]，一个就变成不是数组了。 Hibernate莫名其妙啊。发下牢骚。。。</description>
    </item>
    
    <item>
      <title>itext中文本的绝对位置放置</title>
      <link>https://blog.qiwei.dev/posts/coding/itext-absolute-position/</link>
      <pubDate>Thu, 12 May 2011 12:02:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/itext-absolute-position/</guid>
      <description>itext中文本的绝对位置放置</description>
    </item>
    
    <item>
      <title>用apache的ant解压zip文件（中文文件或文件夹解决方法）</title>
      <link>https://blog.qiwei.dev/posts/coding/apache-ant-unzip-chinese/</link>
      <pubDate>Fri, 04 Mar 2011 12:01:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/apache-ant-unzip-chinese/</guid>
      <description>用apache的ant解压zip文件（中文文件或文件夹解决方法）</description>
    </item>
    
    <item>
      <title>ClientAbortException: java.net.SocketException:”异常的问题</title>
      <link>https://blog.qiwei.dev/posts/coding/web-pic-stream/</link>
      <pubDate>Wed, 08 Dec 2010 22:35:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/web-pic-stream/</guid>
      <description>前几天，在做图片以stream形式输出到页面上展现的时候，后台一直报异常，且页面上图片无法正常现实。异常内容为：
ClientAbortException: java.net.SocketException: Software caused connection abort: socket write error at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:358) at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:434) at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:309) at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:288) at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:98) at javax.imageio.stream.FileCacheImageOutputStream.close(FileCacheImageOutputStream.java:213) ...... 在网上找了好久，发现是个普遍问题，但原因各异，有人总结为：
1：服务器的并发连接数超过了其承载量，服务器会将其中一些连接Down掉；
2：客户关掉了浏览器，而服务器还在给客户端发送数据；
3：浏览器端按了Stop；
4：服务器给客户端响应结果给防火墙拦截了。
这些原因太过笼统，细查错误很难。
偶然在一个英文网页上看到了条有关这个异常的，本人英语水平差，只能说个大意：
这个已知异常出现在IE浏览器显示tif格式的图片的时候。
亲自试验了下，的确在chrome和火狐上显示时，后台不会报次错误，不过图片显示有点异样。因为图片是存于数据库的BLOB类型的字段中，所以一直没注意图片的格式，后来才发现，原来图片是gif格式，而我使用ImageIO.write(img, &amp;ldquo;jpeg&amp;rdquo;, response.getOutputStream());输出成jpg格式的图片，以致导致IE浏览器对图片解析有问题。在此将jpeg改成gif后不再出现异常。
忙乎了一天多，结果问题出在这里。
其问题导致的原因可能是：IE浏览器在解析错误图片格式或不支持的图片格式时，可能向服务器发送了多次请求或是直接关闭了连接，从而导致了tomcat报次异常。</description>
    </item>
    
  </channel>
</rss>
