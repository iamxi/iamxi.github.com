<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>设计模式 on 我的博客</title>
    <link>https://blog.qiwei.dev/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on 我的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 08 Aug 2013 15:27:00 +0800</lastBuildDate><atom:link href="https://blog.qiwei.dev/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式学习-组合模式（Composite）</title>
      <link>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-composite/</link>
      <pubDate>Thu, 08 Aug 2013 15:27:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-composite/</guid>
      <description>组合模式将对象组合成树形结构以表示“部分 -整体”的层次结构。Composite使得用户对单个对象和组合对象的使用具有一致性。</description>
    </item>
    
    <item>
      <title>原型工厂模式</title>
      <link>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-prototype-factory/</link>
      <pubDate>Wed, 31 Jul 2013 13:58:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-prototype-factory/</guid>
      <description>顾名思义就是原型模式和工厂模式的结合。在GOF的书里面，抽象工厂那节中对这个有描述，不过内容很少，所以看的时候也没注意到。</description>
    </item>
    
    <item>
      <title>设计模式学习-桥接模式（Bridge）</title>
      <link>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-bridge/</link>
      <pubDate>Wed, 31 Jul 2013 13:44:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-bridge/</guid>
      <description>桥接模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。</description>
    </item>
    
    <item>
      <title>设计模式学习-适配器（Adapter）</title>
      <link>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-adapter/</link>
      <pubDate>Wed, 31 Jul 2013 12:26:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-adapter/</guid>
      <description>将一个类的接口转换成客户希望的另外一个接口。 Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</description>
    </item>
    
    <item>
      <title>设计模式学习-创建型模式</title>
      <link>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-creational-pattern/</link>
      <pubDate>Wed, 31 Jul 2013 09:59:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-creational-pattern/</guid>
      <description>用于创建对象的模式。包括单件模式（Singleton）、抽象工厂模式（Abstract Factory）、生成器模式（Builder）、工厂方法模式（Factory Method）、原型模式（Prototype）。</description>
    </item>
    
    <item>
      <title>设计模式学习-单件（Singleton）</title>
      <link>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-singleton/</link>
      <pubDate>Wed, 31 Jul 2013 09:39:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-singleton/</guid>
      <description>单件可以保证一个类仅有一个实例，并提供一个访问它的全局访问点。</description>
    </item>
    
    <item>
      <title>设计模式学习-工厂方法（Factory Method）</title>
      <link>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-factory-method/</link>
      <pubDate>Tue, 30 Jul 2013 16:21:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-factory-method/</guid>
      <description>定义一个用于创建对象的接口，让子类决定实例化哪一个类。 Factory Method使一个类的实例化延迟到其子类。</description>
    </item>
    
    <item>
      <title>设计模式学习-生成器（Builder）</title>
      <link>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-builder/</link>
      <pubDate>Tue, 30 Jul 2013 15:56:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-builder/</guid>
      <description>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示，java的StringBuilder就是一个Builder模式的例子。</description>
    </item>
    
    <item>
      <title>设计模式学习-抽象工厂（Abstract Factory）</title>
      <link>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-abstract-factory/</link>
      <pubDate>Mon, 29 Jul 2013 16:56:00 +0800</pubDate>
      
      <guid>https://blog.qiwei.dev/posts/coding/design-patterns/design-patterns-abstract-factory/</guid>
      <description>抽象工厂，提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</description>
    </item>
    
  </channel>
</rss>
